# https://www.playframework.com/documentation/latest/Configuration


db.default {
  driver = "com.mysql.cj.jdbc.Driver"
  url = "jdbc:mysql://localhost/emodb?useSSL=false&serverTimezone=UTC"
  url = ${?DATABASE_URL}
  username = "wavy"
  username = ${?DATABASE_USERNAME}
  password = "password"
  password = ${?DATABASE_PASSWORD}
  hikaricp.maximumPoolSize = ${?DATABASE_POOL_SIZE}
  hikaricp.maximumPoolSize = 3
}

liquibase {
    changeLogFile = "conf/db/changelog-master.xml"
}

play {
  modules {
    enabled += "play.api.db.DBModule"
    enabled += "play.api.db.HikariCPModule"
    enabled += "Module"
  }
  assets {
    path = "/public"
    urlPrefix = "/assets"
  }
}

emo.config {
    loginTokenExpirationTime = 365 days
    loginTokenExpirationTime = ${?LOGIN_TOKEN_EXPIRATION_TIME}
    threadDumpOnShutdown = false
    threadDumpOnShutdown = ${?THREAD_DUMP_ON_SHUTDOWN}
}

database.dispatcher {
  type = "Dispatcher"
  executor = "thread-pool-executor"
  throughput = 1
}

jwt {
  algorithm = "HS256"
  secret = "changeme"
  secret = ${?JWT_SECRET}
}

openai {
  apikey = ${OPENAI_API_KEY}
  timeout = 120 seconds
  baseUrl = "https://api.openai.com"
  baseUrl = ${?BASE_URL}
  systemPromt =  "Analyze the given text, determine the emotions, and provide a one liner JSON response without new lines with the following information: {\\\"textTitle\\\": \\\"The main idea of the text (in the same language as the user note).\\\", \\\"intensity\\\": \\\"0 to 5, indicating emotion intensity.\\\", \\\"subEmotionId\\\": \\\"sub-emotion only from the provided list below.\\\", \\\"description\\\": \\\"Explain what the user feels and why (in the same language as the user note). The description should provide empathy and understanding.\\\", \\\"suggestion\\\": \\\"Provide helpful general advice based on the emotion detected.\\\", \\\"triggers\\\": \\\"Identify the primary trigger for the emotion from this list: People, Situations, Places, Ideas, Other.\\\", \\\"tags\\\": \\\"Keywords related to emotions and text (in both English and user language if needed).\\\", \\\"todos\\\": \\\"Practical actions the user can take in order to make the situation better. The todo should be as concrete as possible and formulated as an answer to the question of: what should I do? Todos should help the user address their emotions and triggers effectively.\\\", \\\"Ensure that your response is in the same language as the user note and avoid using jargon or complex terminology. Keep descriptions and suggestions concise but informative.\\\", \\\"Your output should be JSON in the same structure as the following example output for user note, include only the json: 'I helped my child with his homework': { 'textTitle': 'Helping my child with his homework', 'intensity': 2, 'subEmotionId': 'Curiosity', 'description': 'You feel useful and happy while helping your child.', 'suggestion': 'Take a moment to appreciate the feeling. Think if there are other ways you can help people around you.', 'triggers': [{'triggerName': 'People'}], 'todos': [ { 'title': 'Help my child with his homework', 'description': 'Help my child with his homework', 'type': 'help' }, { 'title': 'Spend more time with my child', 'description': 'Spend more time with my child', 'type': 'help' } ], 'tags': [{'tagName': 'help'}, {'tagName': 'child'}] }\\\", \\\"Return only the JSON in response. Output json as one-liner. Here's the list of emotion types, main emotions, and sub-emotions in JSON format (in your answer just provide sub-emotion, as the emotion type and main emotion can be derived from it): { 'Negative': { 'Anger': [ 'Aggressiveness', 'Annoyance', 'Bitterness', 'Frustration', 'Fury', 'Hatred', 'Hostility', 'Indignation', 'Insult', 'Irritability', 'Nervousness', 'Offense', 'Resentment' ], 'Apathy': [ 'Disinterest', 'Indifference', 'Lethargy' ], 'Disgust': [ 'Arrogance', 'Aversion', 'Contempt', 'Disapproval', 'Disdain', 'Distaste', 'Loathing', 'Nausea', 'Repugnance', 'Revulsion', 'Self-satisfaction' ], 'Fear': [ 'Agitation', 'Alertness', 'Anxiety', 'Apprehension', 'Awkwardness', 'Concern', 'Dread', 'Fright', 'Horror', 'Insecurity', 'Panic', 'Sense of threat', 'Suspicion', 'Trepidation', 'Uneasiness', 'Worry' ], 'Jealousy': [ 'Covetousness', 'Longing' ], 'Sadness': [ 'Abandonment', 'Alienation', 'Apathy', 'Dejection', 'Depression', 'Despair', 'Desperation', 'Devastation', 'Disappointment', 'Disorder', 'Gloom', 'Grief', 'Heaviness', 'Helplessness', 'Hopelessness', 'Infringement', 'Isolation', 'Listlessness', 'Loneliness', 'Melancholy', 'Oppression', 'Pain', 'Sorrow', 'Vulnerability', 'Weakness', 'Weariness' ], 'Shame': [ 'Chagrin', 'Disgrace', 'Dishonor', 'Embarrassment', 'Guilt', 'Humiliation', 'Regret', 'Remorse', 'Shyness' ] }, 'Neutral': { 'Other': [ 'Audacity', 'Boredom', 'Decline of strength', 'Determination', 'Discomfort', 'Dreaminess', 'Exhaustion', 'Incoherence', 'Lostness', 'Rebellion', 'Restraint', 'Sense of deadlock', 'Sentimentality', 'Seriousness', 'Stupidity', 'Tiredness' ], 'Surprise': [ 'Amazement', 'Astonishment', 'Bewilderment', 'Confusion', 'Defeat', 'Disarray', 'Disbelief', 'Disorientation', 'Dizziness', 'Eagerness', 'Fascination', 'Inquisitiveness', 'Intrigue', 'Perplexity', 'Shock', 'Startlement', 'Uncertainty', 'Upset', 'Wonder' ] }, 'Positive': { 'Interest': [ 'Curiosity', 'Engagement', 'Focus', 'Hope', 'Impatience' ], 'Joy': [ 'Amusement', 'Bliss', 'Charm', 'Contentment', 'Elation', 'Enthusiasm', 'Euphoria', 'Excitement', 'Gratitude', 'Happiness', 'Optimism', 'Passion', 'Pleasure', 'Pride', 'Satisfaction', 'Serenity', 'Trembling', 'Triumph' ], 'Love': [ 'Adoration', 'Affection', 'Fondness', 'Infatuation', 'Warmth' ], 'Trust': [ 'Admiration', 'Attachment','Awe', 'Calmness', 'Comfort', 'Compassion', 'Confidence', 'Dependability', 'Dependence', 'Faith', 'Friendliness', 'Generosity', 'Loyalty', 'Peacefulness', 'Relaxation', 'Relief', 'Respect', 'Security', 'Sympathy', 'Tenderness' ] } }\\\"}"
  systemPromt = ${?OPENAI_SYSTEM_PROMPT}
  model = "gpt-4o"
  model = ${?OPENAI_MODEL}
}

play.http.errorHandler = io.honeybadger.reporter.play.HoneybadgerErrorHandler
honeybadger.api_key = ${?HONEYBADGER_API_KEY}


# API prefix to be used for all API routes
apiPrefix = "api"

play.server.pidfile.path=/dev/null

play.assets.cache."/public/index.html"="max-age=0"

play.http.secret.key="changeme2"
play.http.secret.key=${?APPLICATION_SECRET}

play.filters.enabled = ["play.filters.cors.CORSFilter"]
play.filters.cors {
  # Allow specific headers
  allowedHttpHeaders = ["Accept", "Origin", "Content-Type", "X-Requested-With", "Authorization"]
  allowedHttpMethods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  allowedOrigins = ["https://www.emosig.com", "https://emoproject-650de3a95c97.herokuapp.com", "http://localhost:4200", "http://localhost:9000"]
  allowedOrigins = [${?ALLOWED_ORIGINS}]
}

play.filters.csrf {
  bypassCorsTrustedOrigins = true
  header {
    protectHeaders = null
    bypassHeaders {
      "X-Requested-With" = "*"
      "Csrf-Token" = "nocheck"
    }
  }
}

akka {
  loglevel = "debug"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor.default-dispatcher.fork-join-executor.parallelism-max = 2
}
